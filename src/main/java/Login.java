
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author pnhcu
 */
public class Login extends javax.swing.JFrame {

    String strUserName, strPassword;
    File folder = new File("Database");
    
    public Login() {
        initComponents();
    }
    //moethod to create the "Database" folder if it's not exist
    void createDatabaseFolder(){
        if(!folder.exists()){
            folder.mkdirs();
        }
    }
    
    //method to load the database.txt file
    void loadDatabaseFile() {
        //try to load the file
        try {
            //if it existed, set the status bar to "Database file found and loaded succesfully!"
            FileReader fr = new FileReader(folder + "\\database.txt");
            lblStatusBar.setText("Database file found and loaded succesfully!");
            
        } catch (FileNotFoundException ex) {
            // if the file is not exist, try to create the file inside of the "Database" folder
            try {
                //if success display a successful message to the status bar
                FileWriter fw = new FileWriter(folder + "\\database.txt");
                lblStatusBar.setText("Database file not found, created successfully!");
                
            } catch (IOException ex1) {
                //if it fails to create the file, display an error message to the status bar
                lblStatusBar.setText("Database file not found, attempt to create database file failed. Please check file write permission!");;
            }
            
        }        
    }
    
    //method to store the registration data into the "database.txt" file
    void registerData(String userName, String password) {
        try {            
            File log = new File(folder + "\\database.txt");
            // Create a fileWrite object with the append parameter set to true to continue append new data into the database.txt
            FileWriter fileWriter = new FileWriter(log, true);
            //try to store the input userName and password into the file
            try (BufferedWriter bufferedWriter = new BufferedWriter(fileWriter)) {
                bufferedWriter.write(userName + "\r\n");
                bufferedWriter.write(password + "\r\n");
            }
            //if success output the message to the status bar
            lblStatusBar.setText("Database updated successfully for user " + userName);
         
        } catch (IOException ex) {
            //if it fails output an error message to the status bar
            lblStatusBar.setText("Database file write error! Please check file write permission");            
        }         
    } 
    
    //method to check the correctness of the login data versus the stored data inside of the database.txt
    void loginValidation(String strUserName, String strPassword) {
        int linesCount = 0;
        //calculate the numbers of lines of the database.txt file
        try {
            RandomAccessFile readNumLines = new RandomAccessFile(folder + "\\database.txt", "rw");
            for(int i=0;readNumLines.readLine()!=null;i++){
                linesCount++;                
            }
            //read the username and password in the database file and do the check where they match with the input from the user
            RandomAccessFile rf = new RandomAccessFile(folder + "\\database.txt", "rw");
            for (int i = 0; i < linesCount; i +=2) {
                String userName = rf.readLine();
                String password = rf.readLine();
                if (strUserName.equals(userName) & strPassword.equals(password)){
                        //If so, load the Converter class and exit the loop
                        //lblStatusBar.setText("Logged in successfully!"); 
                        new Converter().setVisible(true);
                        break;
                    }
                // if not then display the error message to the status bar
                else if (i==(linesCount-2)){
                    lblStatusBar.setText("Wrong username / password. Please try again.");
                    break;
                }
            }
        } catch (IOException ex) {
            lblStatusBar.setText("Database file read error!");
        }
    }
            
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblUsername = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        btnRegister = new javax.swing.JButton();
        txtUsername = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        txtPassword = new javax.swing.JPasswordField();
        lblStatusBar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(2000, 500));
        setResizable(false);

        lblUsername.setText("Username");

        lblPassword.setText("Password");

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        btnRegister.setText("Register");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Unit Converter");
        jLabel1.setToolTipText("");

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        lblStatusBar.setText("  ");
        lblStatusBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUsername)
                            .addComponent(lblPassword))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                            .addComponent(txtPassword))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(btnLogin)
                        .addGap(47, 47, 47)
                        .addComponent(btnRegister)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(btnClear)
                        .addGap(39, 39, 39))))
            .addComponent(lblStatusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(129, 129, 129))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLogin)
                    .addComponent(btnRegister)
                    .addComponent(btnClear))
                .addGap(28, 28, 28)
                .addComponent(lblStatusBar))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtUsername.setText("");
        txtPassword.setText("");     
        lblStatusBar.setText(" ");
        // TODO add your handling code here:
    }//GEN-LAST:event_btnClearActionPerformed
    
    //method that associated with the "login" button, it will create the folder if not exist, load the database.txt file and check the login validation with the file
    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        createDatabaseFolder();
        loadDatabaseFile();        
        loginValidation(txtUsername.getText(), String.valueOf(txtPassword.getPassword()));
    }//GEN-LAST:event_btnLoginActionPerformed

    //method to register new user and password into the database.txt file
    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        createDatabaseFolder();
        loadDatabaseFile();
        registerData(txtUsername.getText(), String.valueOf(txtPassword.getPassword()));
    }//GEN-LAST:event_btnRegisterActionPerformed

    /**
     * @param args the command line arguments
     */    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnRegister;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblStatusBar;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}